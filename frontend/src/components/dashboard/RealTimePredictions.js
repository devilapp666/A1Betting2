import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { SportSelector } from "@/components/common/SportSelector";
import { useState } from "react";
import { getSportDisplayName } from "../../constants/sports";
export function RealTimePredictions({ predictions, loading, }) {
    const [selectedSport, setSelectedSport] = useState("All");
    const [selectedType, setSelectedType] = useState("All");
    const types = ["All", "game", "player_prop"];
    const filteredPredictions = predictions.filter((pred) => {
        const sportMatch = selectedSport === "All" || pred.sport === selectedSport;
        const typeMatch = selectedType === "All" || pred.type === selectedType;
        return sportMatch && typeMatch;
    });
    const getValueGradeColor = (grade) => {
        const colors = {
            "A+": "text-green-600 bg-green-100 dark:bg-green-900/30",
            A: "text-green-500 bg-green-50 dark:bg-green-900/20",
            "B+": "text-blue-600 bg-blue-100 dark:bg-blue-900/30",
            B: "text-blue-500 bg-blue-50 dark:bg-blue-900/20",
            "C+": "text-yellow-600 bg-yellow-100 dark:bg-yellow-900/30",
            C: "text-yellow-500 bg-yellow-50 dark:bg-yellow-900/20",
            D: "text-red-600 bg-red-100 dark:bg-red-900/30",
        };
        return colors[grade] || colors["C"];
    };
    const getRiskColor = (risk) => {
        if (risk < 0.2)
            return "text-green-600";
        if (risk < 0.4)
            return "text-yellow-600";
        return "text-red-600";
    };
    const getConfidenceColor = (confidence) => {
        if (confidence >= 85)
            return "text-green-600";
        if (confidence >= 75)
            return "text-yellow-600";
        return "text-red-600";
    };
    if (loading) {
        return (_jsxs("div", { className: "bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg", children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx("span", { role: "img", "aria-label": "target", className: "text-blue-600 text-2xl animate-spin", children: "\uD83C\uDFAF" }), _jsx("h3", { className: "text-xl font-bold dark:text-white", children: "Generating Real-Time Predictions..." })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-4", children: Array.from({ length: 6 }).map((_, i) => (_jsxs("div", { className: "bg-gray-200 dark:bg-gray-700 rounded-xl p-4 animate-pulse", children: [_jsx("div", { className: "h-4 bg-gray-300 dark:bg-gray-600 rounded mb-2" }), _jsx("div", { className: "h-6 bg-gray-300 dark:bg-gray-600 rounded mb-2" }), _jsx("div", { className: "h-16 bg-gray-300 dark:bg-gray-600 rounded" })] }, i))) })] }));
    }
    if (predictions.length === 0) {
        return (_jsxs("div", { className: "bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg", children: [_jsxs("div", { className: "flex items-center space-x-3 mb-6", children: [_jsx("span", { role: "img", "aria-label": "target", className: "text-blue-600 text-2xl", children: "\uD83C\uDFAF" }), _jsx("h3", { className: "text-xl font-bold dark:text-white", children: "Real-Time Predictions" })] }), _jsxs("div", { className: "text-center py-8", children: [_jsx("span", { role: "img", "aria-label": "warning", className: "text-yellow-500 text-4xl mx-auto mb-4", children: "\u26A0\uFE0F" }), _jsx("h4", { className: "text-lg font-semibold text-gray-600 dark:text-gray-400 mb-2", children: "No Predictions Available" }), _jsx("p", { className: "text-gray-500 dark:text-gray-500", children: "Check your API connections and try refreshing the data" })] })] }));
    }
    return (_jsxs("div", { className: "bg-white dark:bg-gray-800 rounded-2xl p-6 shadow-lg", children: [_jsxs("div", { className: "flex items-center justify-between mb-6", children: [_jsxs("div", { className: "flex items-center space-x-3", children: [_jsx("span", { role: "img", "aria-label": "target", className: "text-blue-600 text-2xl", children: "\uD83C\uDFAF" }), _jsx("h3", { className: "text-xl font-bold dark:text-white", children: "Real-Time Betting Predictions" }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("div", { className: "w-2 h-2 bg-green-400 rounded-full animate-pulse" }), _jsx("span", { className: "text-sm text-green-600 font-medium", children: "Live Data" })] })] }), _jsxs("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [filteredPredictions.length, " predictions from real data"] })] }), _jsxs("div", { className: "flex flex-wrap gap-4 mb-6", children: [_jsx(SportSelector, { selectedSport: selectedSport, onSportChange: setSelectedSport, label: "Sport" }), _jsxs("div", { children: [_jsx("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1", children: "Type" }), _jsx("select", { value: selectedType, onChange: (e) => setSelectedType(e.target.value), className: "px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white", title: "Type", children: types.map((type) => (_jsx("option", { value: type, children: type === "All"
                                        ? "All Types"
                                        : type === "game"
                                            ? "Game Bets"
                                            : "Player Props" }, type))) })] })] }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: filteredPredictions.slice(0, 10).map((prediction) => (_jsxs("div", { className: "p-6 border border-gray-200 dark:border-gray-700 rounded-xl hover:shadow-lg transition-shadow bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20", children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("span", { className: "px-2 py-1 bg-blue-600 text-white rounded-full text-xs font-bold", children: getSportDisplayName(prediction.sport) }), _jsxs("span", { className: `px-2 py-1 rounded-full text-xs font-bold ${getValueGradeColor(prediction.valueGrade)}`, children: ["Grade: ", prediction.valueGrade] }), prediction.valueGrade === "A+" && (_jsx("span", { role: "img", "aria-label": "award", className: "ml-1 text-xl", children: "\uD83C\uDFC6" }))] }), _jsxs("div", { className: "flex items-center space-x-1", children: [_jsx("span", { role: "img", "aria-label": "check", className: "text-green-600 text-lg", children: "\u2705" }), _jsx("span", { className: "text-xs text-green-600 font-medium", children: "REAL DATA" })] })] }), _jsxs("div", { className: "mb-4", children: [_jsx("h4", { className: "font-bold text-lg text-gray-900 dark:text-white mb-1", children: prediction.game }), _jsx("p", { className: "text-blue-600 dark:text-blue-400 font-semibold", children: prediction.pick })] }), _jsxs("div", { className: "grid grid-cols-3 gap-3 mb-4", children: [_jsxs("div", { className: "text-center p-2 bg-white/50 dark:bg-black/20 rounded-lg", children: [_jsx("div", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Confidence" }), _jsxs("div", { className: `text-lg font-bold ${getConfidenceColor(prediction.confidence)}`, children: [prediction.confidence, "%"] })] }), _jsxs("div", { className: "text-center p-2 bg-white/50 dark:bg-black/20 rounded-lg", children: [_jsx("div", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Expected Value" }), _jsxs("div", { className: `text-lg font-bold ${prediction.expectedValue > 0 ? "text-green-600" : "text-red-600"}`, children: [prediction.expectedValue > 0 ? "+" : "", (prediction.expectedValue * 100).toFixed(1), "%"] })] }), _jsxs("div", { className: "text-center p-2 bg-white/50 dark:bg-black/20 rounded-lg", children: [_jsx("div", { className: "text-xs text-gray-600 dark:text-gray-400", children: "Risk Score" }), _jsxs("div", { className: `text-lg font-bold ${getRiskColor(prediction.riskScore)}`, children: [(prediction.riskScore * 100).toFixed(0), "%"] })] })] }), _jsxs("div", { className: "mb-4 p-3 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx("span", { role: "img", "aria-label": "brain", className: "text-purple-600", children: "\uD83E\uDDE0" }), _jsx("span", { className: "text-sm font-semibold text-purple-700 dark:text-purple-300", children: "Advanced Analytics" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-2 text-xs", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Model Consensus:" }), _jsxs("div", { className: "font-bold", children: [(prediction.modelConsensus * 100).toFixed(0), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Kelly Optimal:" }), _jsxs("div", { className: "font-bold", children: [(prediction.kellyOptimal * 100).toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Data Quality:" }), _jsxs("div", { className: "font-bold text-green-600", children: [(prediction.dataQuality * 100).toFixed(0), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Odds:" }), _jsxs("div", { className: "font-bold", children: [prediction.odds > 0 ? "+" : "", prediction.odds] })] })] })] }), _jsxs("div", { className: "mb-4 p-3 bg-gradient-to-r from-green-100 to-blue-100 dark:from-green-900/30 dark:to-blue-900/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx("span", { role: "img", "aria-label": "trending up", className: "text-green-600", children: "\uD83D\uDCC8" }), _jsx("span", { className: "text-sm font-semibold text-green-700 dark:text-green-300", children: "Historical Performance" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-2 text-xs", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Win Rate:" }), _jsxs("div", { className: "font-bold text-green-600", children: [(prediction.backtestResults.winRate * 100).toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Avg Return:" }), _jsxs("div", { className: "font-bold", children: [(prediction.backtestResults.avgReturn * 100).toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Max Drawdown:" }), _jsxs("div", { className: "font-bold text-red-600", children: [(prediction.backtestResults.maxDrawdown * 100).toFixed(1), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Profit Factor:" }), _jsx("div", { className: "font-bold", children: prediction.backtestResults.profitFactor.toFixed(2) })] })] })] }), _jsxs("div", { className: "mb-4 p-3 bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-900/30 dark:to-orange-900/30 rounded-lg", children: [_jsxs("div", { className: "flex items-center space-x-2 mb-2", children: [_jsx("span", { role: "img", "aria-label": "shield", className: "text-yellow-600", children: "\uD83D\uDEE1\uFE0F" }), _jsx("span", { className: "text-sm font-semibold text-yellow-700 dark:text-yellow-300", children: "Live Market Factors" })] }), _jsxs("div", { className: "grid grid-cols-2 gap-2 text-xs", children: [_jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Line Movement:" }), _jsxs("div", { className: `font-bold ${prediction.realTimeFactors.lineMovement > 0 ? "text-green-600" : "text-red-600"}`, children: [prediction.realTimeFactors.lineMovement > 0 ? "+" : "", prediction.realTimeFactors.lineMovement.toFixed(1)] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Public Betting:" }), _jsxs("div", { className: "font-bold", children: [(prediction.realTimeFactors.publicBetting * 100).toFixed(0), "%"] })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Sharp Money:" }), _jsx("div", { className: `font-bold ${prediction.realTimeFactors.sharpMoney ? "text-green-600" : "text-gray-600"}`, children: prediction.realTimeFactors.sharpMoney ? "Yes" : "No" })] }), _jsxs("div", { children: [_jsx("span", { className: "text-gray-600 dark:text-gray-400", children: "Weather Impact:" }), _jsxs("div", { className: "font-bold", children: [(prediction.realTimeFactors.weatherImpact * 100).toFixed(0), "%"] })] })] })] }), _jsxs("div", { className: "mb-4", children: [_jsx("h5", { className: "text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2", children: "Key Reasoning:" }), _jsx("ul", { className: "text-xs text-gray-600 dark:text-gray-400 space-y-1", children: prediction.reasoning.slice(0, 3).map((reason, index) => (_jsxs("li", { className: "flex items-start space-x-1", children: [_jsx("span", { className: "text-blue-600", children: "\u2022" }), _jsx("span", { children: reason })] }, index))) })] }), _jsxs("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: [_jsx("span", { className: "font-medium", children: "Sources:" }), " ", prediction.sources.slice(0, 3).join(", "), prediction.sources.length > 3 &&
                                    ` +${prediction.sources.length - 3} more`] }), _jsxs("div", { className: "text-xs text-gray-400 mt-2", children: ["Updated: ", prediction.timestamp instanceof Date ? prediction.timestamp.toLocaleTimeString() : prediction.timestamp] })] }, prediction.id))) }), filteredPredictions.length === 0 && (_jsxs("div", { className: "text-center py-8", children: [_jsx("span", { role: "img", "aria-label": "target", className: "text-gray-400 text-4xl mx-auto mb-4", children: "\uD83C\uDFAF" }), _jsx("p", { className: "text-gray-500 dark:text-gray-400", children: "No predictions match the selected filters" })] }))] }));
}
